# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def reverseBetween(self, head, left, right):
        if not head or left == right:
            return head  
        dummy = ListNode(0)  
        dummy.next = head
        before_left = dummy  

        for i in range(left - 1):  
            before_left = before_left.next
        left_node = before_left.next  

        right_node = left_node 
        for _ in range(right - left):
            right_node = right_node.next
        after_right = right_node.next  

        cur_node = left_node
        prev = after_right  
        while cur_node != after_right:
            next_node = cur_node.next
            cur_node.next = prev
            prev = cur_node
            cur_node = next_node

        before_left.next = prev  

        return dummy.next
        

        """
        :type head: Optional[ListNode]
        :type left: int
        :type right: int
        :rtype: Optional[ListNode]
        """
        
